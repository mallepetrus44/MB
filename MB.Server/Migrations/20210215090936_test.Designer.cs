// <auto-generated />
using System;
using MB.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MB.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210215090936_test")]
    partial class test
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MB.Shared.FotoModel", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Achternaam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Bovenwijdte")
                        .HasColumnType("int");

                    b.Property<int>("FotoModelId")
                        .HasColumnType("int");

                    b.Property<string>("Fotos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Geboortedatum")
                        .HasColumnType("datetime2");

                    b.Property<int>("GebruikerId")
                        .HasColumnType("int");

                    b.Property<int>("Geslacht")
                        .HasColumnType("int");

                    b.Property<bool>("Goedgekeurd")
                        .HasColumnType("bit");

                    b.Property<int>("Heupwijdte")
                        .HasColumnType("int");

                    b.Property<int>("Leeftijd")
                        .HasColumnType("int");

                    b.Property<int>("Lengte")
                        .HasColumnType("int");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Stad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Taillewijdte")
                        .HasColumnType("int");

                    b.Property<string>("Voornaam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("FotoModel");

                    b.HasData(
                        new
                        {
                            Id = "587b89d3-11d0-42c7-b5bc-b7947998dadc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "efaa986a-3208-465a-abeb-b7d3424dd1cf",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c52c1c5e-e4b5-4a84-9d72-dd9015f2ee8b",
                            TwoFactorEnabled = false,
                            Achternaam = "Vermeulen",
                            Adres = "Leemwierde 40",
                            Bovenwijdte = 90,
                            FotoModelId = 1,
                            Fotos = "",
                            Geboortedatum = new DateTime(1985, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GebruikerId = 3,
                            Geslacht = 1,
                            Goedgekeurd = false,
                            Heupwijdte = 90,
                            Leeftijd = 35,
                            Lengte = 178,
                            Postcode = "1353 LT",
                            Stad = "Almere",
                            Taillewijdte = 61,
                            Voornaam = "Fleur"
                        },
                        new
                        {
                            Id = "011918d1-95a3-4f3d-ab11-9b9dade39edc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d78b8fca-b68c-4204-b4d5-7e76e6585e40",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fc13ab60-2abc-4daf-a86a-0c3f2edd50c3",
                            TwoFactorEnabled = false,
                            Achternaam = "de Wit",
                            Adres = "Oregondreef 102",
                            Bovenwijdte = 86,
                            FotoModelId = 2,
                            Fotos = "",
                            Geboortedatum = new DateTime(1991, 8, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GebruikerId = 4,
                            Geslacht = 1,
                            Goedgekeurd = false,
                            Heupwijdte = 87,
                            Leeftijd = 29,
                            Lengte = 175,
                            Postcode = "3565 BG",
                            Stad = "Utrecht",
                            Taillewijdte = 59,
                            Voornaam = "Lynn"
                        },
                        new
                        {
                            Id = "8d0021e9-5897-4c0b-be53-8e5fc9539554",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5f579f8d-b5f9-4832-958d-4efd2bd5fbd4",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9b20a9f2-8854-49dc-a528-458469c499ba",
                            TwoFactorEnabled = false,
                            Achternaam = "Peters",
                            Adres = "Dollardstraat 2",
                            Bovenwijdte = 101,
                            FotoModelId = 3,
                            Fotos = "",
                            Geboortedatum = new DateTime(1980, 1, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GebruikerId = 5,
                            Geslacht = 0,
                            Goedgekeurd = false,
                            Heupwijdte = 99,
                            Leeftijd = 41,
                            Lengte = 184,
                            Postcode = "1826 CS",
                            Stad = "Alkmaar",
                            Taillewijdte = 81,
                            Voornaam = "Luuk"
                        },
                        new
                        {
                            Id = "7e8dcb3f-7c3c-48f5-b49e-3d6ea7eb7793",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7d47a5df-f94b-4069-b919-e943ac2c5cd5",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "05f2c60d-1609-4b68-a48c-41405ff37f27",
                            TwoFactorEnabled = false,
                            Achternaam = "Meijer",
                            Adres = "Martin Luther Kinglaan 93",
                            Bovenwijdte = 100,
                            FotoModelId = 4,
                            Fotos = "",
                            Geboortedatum = new DateTime(1990, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GebruikerId = 6,
                            Geslacht = 0,
                            Goedgekeurd = false,
                            Heupwijdte = 100,
                            Leeftijd = 30,
                            Lengte = 185,
                            Postcode = "1111 LK",
                            Stad = "Diemen",
                            Taillewijdte = 81,
                            Voornaam = "Stefan"
                        });
                });

            modelBuilder.Entity("MB.Shared.Klant", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Achternaam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BtwNummer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GebruikerId")
                        .HasColumnType("int");

                    b.Property<bool>("Goedgekeurd")
                        .HasColumnType("bit");

                    b.Property<int>("KlantId")
                        .HasColumnType("int");

                    b.Property<int>("KvkNummer")
                        .HasColumnType("int");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Stad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Voornaam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Klant");

                    b.HasData(
                        new
                        {
                            Id = "2df5e957-a3da-4b33-acf7-e93cb3b6127e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cb2447ba-6b00-436c-8c5f-8466968a21bc",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4dfde062-c6d2-451a-937d-4e5644b45b66",
                            TwoFactorEnabled = false,
                            Achternaam = "Janssen",
                            Adres = "Verdilaan 107",
                            BtwNummer = "NL123456789B01",
                            GebruikerId = 1,
                            Goedgekeurd = false,
                            KlantId = 1,
                            KvkNummer = 12345678,
                            Logo = "",
                            Postcode = "4384 LG",
                            Stad = "Vlissingen",
                            Voornaam = "Klaas"
                        },
                        new
                        {
                            Id = "a97686cd-bed8-4054-94a9-0cefd92730bf",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9b1eda94-d5e2-475d-bafe-48099d3623a3",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "68f4ee3f-4264-41d2-abd7-3f47b56dfb63",
                            TwoFactorEnabled = false,
                            Achternaam = "Gerritsen",
                            Adres = "Uiterburen 13",
                            BtwNummer = "NL234567890B02",
                            GebruikerId = 2,
                            Goedgekeurd = false,
                            KlantId = 2,
                            KvkNummer = 23456789,
                            Logo = "",
                            Postcode = "9636 EC",
                            Stad = "Groningen",
                            Voornaam = "Angelina"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
