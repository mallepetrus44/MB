// <auto-generated />
using System;
using MB.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MB.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210211101505_23")]
    partial class _23
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MB.Shared.FotoModel", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Achternaam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Bovenwijdte")
                        .HasColumnType("int");

                    b.Property<int>("FotoModelId")
                        .HasColumnType("int");

                    b.Property<string>("Fotos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Geboortedatum")
                        .HasColumnType("datetime2");

                    b.Property<int>("GebruikerId")
                        .HasColumnType("int");

                    b.Property<int>("Geslacht")
                        .HasColumnType("int");

                    b.Property<bool>("Goedgekeurd")
                        .HasColumnType("bit");

                    b.Property<int>("Heupwijdte")
                        .HasColumnType("int");

                    b.Property<int>("Leeftijd")
                        .HasColumnType("int");

                    b.Property<int>("Lengte")
                        .HasColumnType("int");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Stad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Taillewijdte")
                        .HasColumnType("int");

                    b.Property<string>("Voornaam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("FotoModel");

                    b.HasData(
                        new
                        {
                            Id = "76fac058-760b-48a2-8686-f6e5a2e23a1e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ee2ba444-29f4-4dc5-a601-444ea07c2532",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0994e0f4-b8ae-4daa-b86e-6dd2696b6f97",
                            TwoFactorEnabled = false,
                            Achternaam = "Vermeulen",
                            Adres = "Leemwierde 40",
                            Bovenwijdte = 90,
                            FotoModelId = 1,
                            Fotos = "",
                            Geboortedatum = new DateTime(1985, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GebruikerId = 3,
                            Geslacht = 1,
                            Goedgekeurd = false,
                            Heupwijdte = 90,
                            Leeftijd = 35,
                            Lengte = 178,
                            Postcode = "1353 LT",
                            Stad = "Almere",
                            Taillewijdte = 61,
                            Voornaam = "Fleur"
                        },
                        new
                        {
                            Id = "6e53523d-a016-479a-b4c5-77b5357b00b8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7e5c2af0-fea1-488d-8d79-c5d0683b3ec4",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c282a858-09f9-4f5e-a42e-1fc1a6a5db55",
                            TwoFactorEnabled = false,
                            Achternaam = "de Wit",
                            Adres = "Oregondreef 102",
                            Bovenwijdte = 86,
                            FotoModelId = 2,
                            Fotos = "",
                            Geboortedatum = new DateTime(1991, 8, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GebruikerId = 4,
                            Geslacht = 1,
                            Goedgekeurd = false,
                            Heupwijdte = 87,
                            Leeftijd = 29,
                            Lengte = 175,
                            Postcode = "3565 BG",
                            Stad = "Utrecht",
                            Taillewijdte = 59,
                            Voornaam = "Lynn"
                        },
                        new
                        {
                            Id = "a1191c5e-b2e4-47b2-a748-09dd916135b2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "be9f4d37-c767-400e-a1eb-81c649658f5f",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a261543b-c2d3-47f1-92d5-0471cd84d0d9",
                            TwoFactorEnabled = false,
                            Achternaam = "Peters",
                            Adres = "Dollardstraat 2",
                            Bovenwijdte = 101,
                            FotoModelId = 3,
                            Fotos = "",
                            Geboortedatum = new DateTime(1980, 1, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GebruikerId = 5,
                            Geslacht = 0,
                            Goedgekeurd = false,
                            Heupwijdte = 99,
                            Leeftijd = 41,
                            Lengte = 184,
                            Postcode = "1826 CS",
                            Stad = "Alkmaar",
                            Taillewijdte = 81,
                            Voornaam = "Luuk"
                        },
                        new
                        {
                            Id = "fcd3901d-0b7e-4178-b077-e0e93d7b00e1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3fe28157-f647-46a9-94a0-301e3c0289a5",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c063424d-0acf-410c-b35b-67290d79a242",
                            TwoFactorEnabled = false,
                            Achternaam = "Meijer",
                            Adres = "Martin Luther Kinglaan 93",
                            Bovenwijdte = 100,
                            FotoModelId = 4,
                            Fotos = "",
                            Geboortedatum = new DateTime(1990, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GebruikerId = 6,
                            Geslacht = 0,
                            Goedgekeurd = false,
                            Heupwijdte = 100,
                            Leeftijd = 30,
                            Lengte = 185,
                            Postcode = "1111 LK",
                            Stad = "Diemen",
                            Taillewijdte = 81,
                            Voornaam = "Stefan"
                        });
                });

            modelBuilder.Entity("MB.Shared.Klant", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Achternaam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BtwNummer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GebruikerId")
                        .HasColumnType("int");

                    b.Property<bool>("Goedgekeurd")
                        .HasColumnType("bit");

                    b.Property<int>("KlantId")
                        .HasColumnType("int");

                    b.Property<int>("KvkNummer")
                        .HasColumnType("int");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Stad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Voornaam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Klant");

                    b.HasData(
                        new
                        {
                            Id = "024a0ef7-dd29-4e27-82f5-dfb220a872da",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9e0d04d4-cbb3-437f-b4c2-9166099d2e0f",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "186b603e-cfd0-4ebb-a2e7-b2bc9eb22f0b",
                            TwoFactorEnabled = false,
                            Achternaam = "Janssen",
                            Adres = "Verdilaan 107",
                            BtwNummer = "NL123456789B01",
                            GebruikerId = 1,
                            Goedgekeurd = false,
                            KlantId = 1,
                            KvkNummer = 12345678,
                            Logo = "",
                            Postcode = "4384 LG",
                            Stad = "Vlissingen",
                            Voornaam = "Klaas"
                        },
                        new
                        {
                            Id = "f641ec09-1ec5-4f27-b09f-0aeed4a9c645",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "499eb86d-59ba-45d5-a3f9-16059553fc1f",
                            Email = "",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ff6e1e98-0977-45d5-8179-04aae47c581c",
                            TwoFactorEnabled = false,
                            Achternaam = "Gerritsen",
                            Adres = "Uiterburen 13",
                            BtwNummer = "NL234567890B02",
                            GebruikerId = 2,
                            Goedgekeurd = false,
                            KlantId = 2,
                            KvkNummer = 23456789,
                            Logo = "",
                            Postcode = "9636 EC",
                            Stad = "Groningen",
                            Voornaam = "Angelina"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
